
export interface LPDomains {
    baseURIs: BaseURIs[];
}

export interface BaseURIs {
    service: string;
    account: string;
    baseURI: string;
}
// Generated by https://quicktype.io

export interface LPAuth {
    csrf:                   string;
    wsuk:                   string;
    config:                 Config;
    csdsCollectionResponse: CsdsCollectionResponse;
    accountData:            AccountData;
    sessionTTl:             string;
    bearer:                 string;
    sessionId:              string;
}

export interface AccountData {
    agentGroupsData: AgentGroupsData;
}

export interface AgentGroupsData {
    items:    Item[];
    revision: number;
}

export interface Item {
    id:      number;
    deleted: boolean;
    name:    string;
}

export interface Config {
    loginName:          string;
    userId:             string;
    userPid:            string;
    userPrivileges:     number[];
    serverCurrentTime:  number;
    timeDiff:           number;
    serverTimeZoneName: string;
    serverTimeGMTDiff:  number;
    isLPA:              boolean;
    isAdmin:            boolean;
    accountTimeZoneId:  string;
}

export interface CsdsCollectionResponse {
    baseURIs: BaseURIs[];
}

export interface BaseURIs {
    account: string;
    baseURI: string;
    service: string;
}

export interface HistorySearchResult {
    _metadata:                  Metadata;
    conversationHistoryRecords: ConversationHistoryRecord[];
}

export interface Metadata {
    count:              number;
    self:               Self;
    last:               Last;
    next:               Next;
    shardsStatusResult: ShardsStatusResult;
}

export interface Self {
    rel:  string;
    href: string;
}

export interface Last {
    rel:  string;
    href: string;
}

export interface Next {
    rel:  string;
    href: string;
}

export interface ShardsStatusResult {
    partialResult: boolean;
}

export interface ConversationHistoryRecord {
    info:                 Info;
    messageRecords:       MessageRecord[];
    agentParticipants:    AgentParticipant[];
    consumerParticipants: ConsumerParticipant[];
    transfers:            any[];
    dialogs:              Dialog[];
    conversationSurveys:  any[];
    responseTime:         ResponseTime;
}

export interface AgentParticipant {
    agentFullName:  string;
    agentNickname:  string;
    agentLoginName: string;
    agentDeleted:   boolean;
    agentId:        string;
    agentPid:       string;
    userType:       string;
    userTypeName:   string;
    role:           string;
    agentGroupName: string;
    agentGroupId:   number;
    time:           string;
    timeL:          number;
    permission:     string;
    dialogId:       string;
}

export interface ConsumerParticipant {
    participantId: string;
    firstName:     string;
    time:          string;
    timeL:         number;
    joinTime:      string;
    joinTimeL:     number;
    consumerName:  string;
    dialogId:      string;
}

export interface Dialog {
    dialogId:               string;
    status:                 string;
    dialogType:             string;
    dialogChannelType:      string;
    startTime:              string;
    startTimeL:             number;
    endTime:                string;
    endTimeL:               number;
    closeReason:            string;
    closeReasonDescription: string;
    skillId:                number;
    skillName:              string;
}

export interface Info {
    startTime:              string;
    startTimeL:             number;
    endTime:                string;
    endTimeL:               number;
    conversationEndTime:    string;
    conversationEndTimeL:   number;
    fullDialogEndTime:      string;
    fullDialogEndTimeL:     number;
    duration:               number;
    conversationId:         string;
    brandId:                string;
    latestAgentId:          string;
    latestAgentNickname:    string;
    latestAgentFullName:    string;
    latestAgentLoginName:   string;
    agentDeleted:           boolean;
    latestSkillId:          number;
    latestSkillName:        string;
    source:                 Source;
    closeReason:            string;
    closeReasonDescription: string;
    mcs:                    number;
    alertedMCS:             number;
    status:                 string;
    fullDialogStatus:       string;
    firstConversation:      boolean;
    device:                 string;
    browser:                string;
    browserVersion:         string;
    operatingSystem:        string;
    operatingSystemVersion: string;
    latestAgentGroupId:     number;
    latestAgentGroupName:   string;
    latestQueueState:       string;
    isPartial:              boolean;
    visitorId:              string;
    sessionId:              string;
    interactionContextId:   string;
    timeZone:               string;
    features:               string[];
    language:               string;
    integration:            string;
    integrationVersion:     string;
    appId:                  string;
    ipAddress:              string;
    pendingAgentSurvey:     boolean;
    latestHandlerAccountId: string;
    latestHandlerSkillId:   number;
}

export enum Source {
    Shark = "SHARK",
}

export interface MessageRecord {
    type:               Type;
    messageData:        MessageData;
    messageId:          string;
    audience:           Audience;
    seq:                number;
    dialogId:           string;
    participantId:      string;
    source:             Source;
    time:               string;
    timeL:              number;
    integrationSource:  Source;
    device?:            string;
    sentBy:             SentBy;
    contextData?:       ContextData;
    predefinedContent?: boolean;
}

export enum Audience {
    All = "ALL",
}

export interface ContextData {
    rawMetadata:        string;
    structuredMetadata: StructuredMetadatum[];
}

export interface StructuredMetadatum {
    botResponse: BotResponse;
}

export interface BotResponse {
    externalConversationId: string;
    businessCases:          any[];
    intents:                any[];
}

export interface MessageData {
    msg?:  Msg;
    file?: File;
}

export interface File {
    relativePath: string;
    fileType:     string;
    caption:      string;
}

export interface Msg {
    text: string;
}

export enum SentBy {
    Agent = "Agent",
    Consumer = "Consumer",
}

export enum Type {
    HostedFile = "HOSTED_FILE",
    TextPlain = "TEXT_PLAIN",
}

export interface ResponseTime {
    latestEffectiveResponseDueTime: number;
    configuredResponseTime:         number;
}

// Generated by https://quicktype.io

export interface FileLinkPayload {
    conversationId: string;
    fileId:         string;
    latestAgentId:  string;
}
